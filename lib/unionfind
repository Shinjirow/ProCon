//union-find木のライブラリ

vector<int> par;

void printState() {
    if (DEBUG) {
        cerr << "---" << endl;
        for(int i = 0;i < par.size();i++){
            printf("%dの親は%d\n", i, par[i]);
        }
        cerr << "---" << endl;
    }
}

/* xの属する集合を返す */
int find(int x) {
    if (par[x] == x) return x;
    return par[x] = find(par[x]);
}

/* yにxを統合する */
void unite(int x, int y) {
    par[find(x)] = par[find(y)];
}

/* xとyが属する集合が同じかを判定する */
bool same(int x, int y) {
    return find(x) == find(y);
}


class UnionFind {
    vector<int> par;//p[i]はiの属する組織
public:
    UnionFind(int n){
        par = vector<int>(n);
        for(int i = 0; i < n; i++){
            par[i] = i;
        }
        return;
    }

    void printState() {
        if (DEBUG) {
            cerr << "---" << endl;
            for (int i = 0; i < par.size(); i++) {
                printf("%dの親は%d\n", i, par[i]);
            }
            cerr << "---" << endl;
        }
    }

/* xの属する集合を返す */
    int find(int x) {
        if (par[x] == x) return x;
        return par[x] = find(par[x]);
    }

/* yにxを統合する */
    void unite(int x, int y) {
        par[find(x)] = par[find(y)];
    }

/* xとyが属する集合が同じかを判定する */
    bool same(int x, int y) {
        return find(x) == find(y);
    }

};